#!/bin/dash 
##############################################################################
# Copyright (c) 2012 Mark Charlebois
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to 
# deal in the Software without restriction, including without limitation the 
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
# sell copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
##############################################################################
get_commandname() {
	dir=`dirname $1`
	pwd=`pwd`
	cd $dir
	cmd=`pwd`/`basename $1`
	cd $pwd
}

parse_args() {
	flags=""
	list=""
	dlist=""
	num=0
	for k in $*
	do
		case $k in
		-R)
			flag_R=1;
			;;
		-1)
			flag_1=1;
			;;
		-F)
			flag_F=1;
			;;
		-z)
			flag_z=1;
			;;
		-*)
			echo "Usage $0 -[RF1] [file...]"
			exit 1
			;;
		*)
			if [ -e "$k" ]; then
				if [ -d $k ]; then
					if [ -n "$dlist" ]; then
						num=2
					else
						num=1
					fi
					dlist=${dlist}" $k"
					list=${list}" $k"
				else
					list=${list}" $k"
				fi
				continue
			else
				echo "ls: cannot access ${k}: No such file or directory"
				exit 1
			fi
			;;
		esac
		flags=${flags}" $k"
	done
}


handle_special_cases() {
	# Do not traverse dirs if z flag is set
	if [ -n "$flag_z" ]; then
		dlist=""
	#if no files/dirs provided list current dir
	elif [ -z "$list" ]; then
		if [ "`echo *`" != "*" ]; then
			if [ -n "$flag_R" ]; then
				$cmd $flags *
			else
				$cmd $flags -z *
			fi
		fi
		exit 0
	#if one dir provided, cd to there and list
	elif [ $num -eq 1 -a "$list" = "$dlist" ]; then
		pwd=`pwd`
		cd $dlist
		if [ "`echo *`" != "*" ]; then
			if [ -n "$flag_R" ]; then
				$cmd $flags *
			else
				$cmd $flags -z *
			fi
		fi
		cd $pwd
		exit 0
	# Otherwise prune dirs from $list
	else
		tlist=$list
		list=""
		for t in $tlist
		do
			if [ ! -d $t ]; then
				list=${list}$t" "
			fi
		done
	fi
}

format_entry() {
	entry="$1"
	if [ -d $1 ]; then
		entry="$1/"
	elif [ -L "$1" ]; then
		entry="${1}@"
	elif [ -x "$1" ]; then
		entry="$1\*"
	fi
}

print_entries() {
	flist=""
	for f in $list
	do
		if [ -n "$flag_F" ]; then
			format_entry $f
		else
			entry=$f
		fi
		flist=${flist}$entry" "
	done
	if [ -z "$flag_1" ]; then
		for f in $flist
		do
			echo -n $f
			echo -n "  "
		done
		echo
	else
		for f in $flist
		do
			echo $f
		done
	fi
}

process_subdirs() {
	if [ -z "$flag_z" ]; then
		if [ -z "$flag_R" ]; then
			flags=${flags}" -z"
		fi
	fi
	for d in $dlist
	do
		echo
		echo $d:
		pwd=`pwd`
		cd $d
		$cmd $flags 
		cd $pwd
	done
}

get_commandname $0
parse_args $*
handle_special_cases
print_entries
process_subdirs
