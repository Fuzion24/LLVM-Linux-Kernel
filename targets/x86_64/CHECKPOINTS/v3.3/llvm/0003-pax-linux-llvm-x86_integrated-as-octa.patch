From 82f3cc0f20a24bc705fdf5ddf3e7b882c0ddca13 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan-Simon=20M=C3=B6ller?= <dl9pf@gmx.de>
Date: Tue, 10 Jul 2012 13:39:58 +0200
Subject: [PATCH 3/6] pax-linux-llvm x86_integrated-as-octa.patch

Patch from series at http://lists.cs.uiuc.edu/pipermail/llvm-commits/Week-of-Mon-20120507/142707.html by PaX Team.
---
 include/llvm/MC/MCParser/MCAsmLexer.h |   17 +++++++++++++----
 lib/MC/MCParser/AsmLexer.cpp          |    4 ++--
 lib/MC/MCParser/AsmParser.cpp         |    3 +++
 3 files changed, 18 insertions(+), 6 deletions(-)

Index: llvm/include/llvm/MC/MCParser/MCAsmLexer.h
===================================================================
--- llvm.orig/include/llvm/MC/MCParser/MCAsmLexer.h	2012-07-20 12:45:59.002751956 -0400
+++ llvm/include/llvm/MC/MCParser/MCAsmLexer.h	2012-07-20 15:19:33.912753423 -0400
@@ -10,6 +10,7 @@
 #ifndef LLVM_MC_MCASMLEXER_H
 #define LLVM_MC_MCASMLEXER_H
 
+#include "llvm/ADT/APInt.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/Support/DataTypes.h"
 #include "llvm/Support/SMLoc.h"
@@ -58,12 +59,14 @@
   /// a memory buffer owned by the source manager.
   StringRef Str;
 
-  int64_t IntVal;
+  APInt IntVal;
 
 public:
   AsmToken() {}
-  AsmToken(TokenKind _Kind, StringRef _Str, int64_t _IntVal = 0)
+  AsmToken(TokenKind _Kind, StringRef _Str, APInt _IntVal)
     : Kind(_Kind), Str(_Str), IntVal(_IntVal) {}
+  AsmToken(TokenKind _Kind, StringRef _Str, int64_t _IntVal = 0)
+    : Kind(_Kind), Str(_Str), IntVal(64, _IntVal, true) {}
 
   TokenKind getKind() const { return Kind; }
   bool is(TokenKind K) const { return Kind == K; }
@@ -100,15 +103,21 @@
   // as a single token, then diagnose as an invalid number).
   int64_t getIntVal() const {
     assert(Kind == Integer && "This token isn't an integer!");
-    return IntVal;
+    return IntVal.getZExtValue();
   }
 
   /// getRegVal - Get the register number for the current token, which should
   /// be a register.
   unsigned getRegVal() const {
     assert(Kind == Register && "This token isn't a register!");
-    return static_cast<unsigned>(IntVal);
+    return static_cast<unsigned>(IntVal.getZExtValue());
+  }
+
+  APInt getAPIntVal() const {
+    assert(Kind == Integer && "This token isn't an integer!");
+    return IntVal;
   }
+
 };
 
 /// MCAsmLexer - Generic assembler lexer interface, for use by target specific
Index: llvm/lib/MC/MCParser/AsmLexer.cpp
===================================================================
--- llvm.orig/lib/MC/MCParser/AsmLexer.cpp	2012-07-20 12:45:59.038750949 -0400
+++ llvm/lib/MC/MCParser/AsmLexer.cpp	2012-07-20 15:19:33.912753423 -0400
@@ -239,7 +239,7 @@
     if (CurPtr == NumStart)
       return ReturnError(CurPtr-2, "invalid hexadecimal number");
 
-    unsigned long long Result;
+    APInt Result(128, 0);
     if (StringRef(TokStart, CurPtr - TokStart).getAsInteger(0, Result))
       return ReturnError(TokStart, "invalid hexadecimal number");
 
@@ -248,7 +248,7 @@
     SkipIgnoredIntegerSuffix(CurPtr);
 
     return AsmToken(AsmToken::Integer, StringRef(TokStart, CurPtr - TokStart),
-                    (int64_t)Result);
+                    Result);
   }
 
   // Must be an octal number, it starts with 0.
Index: llvm/lib/MC/MCParser/AsmParser.cpp
===================================================================
--- llvm.orig/lib/MC/MCParser/AsmParser.cpp	2012-07-20 12:46:04.554598091 -0400
+++ llvm/lib/MC/MCParser/AsmParser.cpp	2012-07-20 15:19:33.912753423 -0400
@@ -234,6 +234,7 @@
  // ".ascii", ".asciiz", ".string"
   bool ParseDirectiveAscii(StringRef IDVal, bool ZeroTerminated);
   bool ParseDirectiveValue(unsigned Size); // ".byte", ".long", ...
+  bool ParseDirectiveOctaValue(); // ".octa"
   bool ParseDirectiveRealValue(const fltSemantics &); // ".single", ...
   bool ParseDirectiveFill(); // ".fill"
   bool ParseDirectiveSpace(); // ".space"
@@ -1203,6 +1204,8 @@
       return ParseDirectiveValue(8);
     if (IDVal == ".8byte")
       return ParseDirectiveValue(8);
+    if (IDVal == ".octa")
+      return ParseDirectiveOctaValue();
     if (IDVal == ".single" || IDVal == ".float")
       return ParseDirectiveRealValue(APFloat::IEEEsingle);
     if (IDVal == ".double")
@@ -1913,6 +1916,42 @@
 
       if (getLexer().is(AsmToken::EndOfStatement))
         break;
+
+      // FIXME: Improve diagnostic.
+      if (getLexer().isNot(AsmToken::Comma))
+        return TokError("unexpected token in directive");
+      Lex();
+    }
+  }
+
+  Lex();
+  return false;
+}
+
+/// ParseDirectiveOctaValue
+///  ::= .octa [ hexconstant (, hexconstant)* ]
+bool AsmParser::ParseDirectiveOctaValue() {
+  if (getLexer().isNot(AsmToken::EndOfStatement)) {
+    CheckForValidSection();
+
+    for (;;) {
+      if (Lexer.getKind() != AsmToken::Integer)
+        return TokError("unknown token in expression");
+
+      APInt IntValue = getTok().getAPIntVal();
+      Lex();
+
+      assert(IntValue.isIntN(128) && "Invalid .octa constant");
+      if (MAI.isLittleEndian()) {
+        getStreamer().EmitIntValue(IntValue.getLoBits(64).getZExtValue(), 8, DEFAULT_ADDRSPACE);
+        getStreamer().EmitIntValue(IntValue.getHiBits(64).getZExtValue(), 8, DEFAULT_ADDRSPACE);
+      } else {
+        getStreamer().EmitIntValue(IntValue.getHiBits(64).getZExtValue(), 8, DEFAULT_ADDRSPACE);
+        getStreamer().EmitIntValue(IntValue.getLoBits(64).getZExtValue(), 8, DEFAULT_ADDRSPACE);
+      }
+
+      if (getLexer().is(AsmToken::EndOfStatement))
+        break;
 
       // FIXME: Improve diagnostic.
       if (getLexer().isNot(AsmToken::Comma))
