diff --git a/arch/arm/mach-msm/smd_rpcrouter.c b/arch/arm/mach-msm/smd_rpcrouter.c
index 983d0c1..61db607 100644
--- a/arch/arm/mach-msm/smd_rpcrouter.c
+++ b/arch/arm/mach-msm/smd_rpcrouter.c
@@ -452,7 +452,7 @@ static struct rr_server *rpcrouter_create_server(uint32_t pid,
 	if (!server)
 		return ERR_PTR(-ENOMEM);
 
-	memset(server, 0, sizeof(struct rr_server));
+	(void)memset(server, 0, sizeof(struct rr_server));
 	server->pid = pid;
 	server->cid = cid;
 	server->prog = prog;
@@ -573,7 +573,7 @@ struct msm_rpc_endpoint *msm_rpcrouter_create_local_endpoint(dev_t dev)
 	ept = kmalloc(sizeof(struct msm_rpc_endpoint), GFP_KERNEL);
 	if (!ept)
 		return NULL;
-	memset(ept, 0, sizeof(struct msm_rpc_endpoint));
+	(void)memset(ept, 0, sizeof(struct msm_rpc_endpoint));
 	ept->cid = (uint32_t) ept;
 	ept->pid = RPCROUTER_PID_LOCAL;
 	ept->dev = dev;
@@ -675,7 +675,7 @@ static int rpcrouter_create_remote_endpoint(uint32_t pid, uint32_t cid)
 	new_c = kmalloc(sizeof(struct rr_remote_endpoint), GFP_KERNEL);
 	if (!new_c)
 		return -ENOMEM;
-	memset(new_c, 0, sizeof(struct rr_remote_endpoint));
+	(void)memset(new_c, 0, sizeof(struct rr_remote_endpoint));
 
 	new_c->cid = cid;
 	new_c->pid = pid;
@@ -772,7 +772,7 @@ static int process_control_msg(struct rpcrouter_xprt_info *xprt_info,
 	switch (msg->cmd) {
 	case RPCROUTER_CTRL_CMD_HELLO:
 		RR("o HELLO PID %d\n", xprt_info->remote_pid);
-		memset(&ctl, 0, sizeof(ctl));
+		(void)memset(&ctl, 0, sizeof(ctl));
 		ctl.cmd = RPCROUTER_CTRL_CMD_HELLO;
 		rpcrouter_send_control_msg(xprt_info, &ctl);
 
@@ -1225,7 +1225,7 @@ fail_data:
 void msm_rpc_setup_req(struct rpc_request_hdr *hdr, uint32_t prog,
 		       uint32_t vers, uint32_t proc)
 {
-	memset(hdr, 0, sizeof(struct rpc_request_hdr));
+	(void)memset(hdr, 0, sizeof(struct rpc_request_hdr));
 	hdr->xid = cpu_to_be32(atomic_add_return(1, &next_xid));
 	hdr->rpc_vers = cpu_to_be32(2);
 	hdr->prog = cpu_to_be32(prog);
@@ -1506,7 +1506,7 @@ static struct msm_rpc_reply *get_avail_reply(struct msm_rpc_endpoint *ept)
 		if (!reply)
 			return 0;
 		D("Adding reply 0x%08x \n", (unsigned int)reply);
-		memset(reply, 0, sizeof(struct msm_rpc_reply));
+		(void)memset(reply, 0, sizeof(struct msm_rpc_reply));
 		spin_lock_irqsave(&ept->reply_q_lock, flags);
 		ept->reply_cnt++;
 		spin_unlock_irqrestore(&ept->reply_q_lock, flags);
@@ -1729,7 +1729,7 @@ int msm_rpc_call_reply(struct msm_rpc_endpoint *ept, uint32_t proc,
 	if (ept->dst_pid == 0xffffffff)
 		return -ENOTCONN;
 
-	memset(req, 0, sizeof(*req));
+	(void)memset(req, 0, sizeof(*req));
 	req->xid = cpu_to_be32(atomic_add_return(1, &next_xid));
 	req->rpc_vers = cpu_to_be32(2);
 	req->prog = ept->dst_prog;
diff --git a/arch/arm/kernel/module.c b/arch/arm/kernel/module.c
index 016d6a0..0867f7a 100644
--- a/arch/arm/kernel/module.c
+++ b/arch/arm/kernel/module.c
@@ -305,7 +305,7 @@ int module_finalize(const Elf32_Ehdr *hdr, const Elf_Shdr *sechdrs,
 	struct mod_unwind_map maps[ARM_SEC_MAX];
 	int i;
 
-	memset(maps, 0, sizeof(maps));
+	(void)memset(maps, 0, sizeof(maps));
 
 	for (s = sechdrs; s < sechdrs_end; s++) {
 		const char *secname = secstrs + s->sh_name;
diff --git a/arch/arm/kernel/ptrace.c b/arch/arm/kernel/ptrace.c
index 9726006..52d8ec7 100644
--- a/arch/arm/kernel/ptrace.c
+++ b/arch/arm/kernel/ptrace.c
@@ -239,7 +239,7 @@ static int thumb2_break_trap(struct pt_regs *regs, unsigned int instr)
 	if (processor_mode(regs) == SVC_MODE) {
 		instr2 = *(u16 *) pc;
 	} else {
-		get_user(instr2, (u16 __user *)pc);
+		(void)get_user(instr2, (u16 __user *)pc);
 	}
 
 	if (instr2 == 0xa000) {
@@ -426,7 +426,7 @@ static void ptrace_hbptriggered(struct perf_event *bp, int unused,
  */
 void clear_ptrace_hw_breakpoint(struct task_struct *tsk)
 {
-	memset(tsk->thread.debug.hbp, 0, sizeof(tsk->thread.debug.hbp));
+	(void)memset(tsk->thread.debug.hbp, 0, sizeof(tsk->thread.debug.hbp));
 }
 
 /*
diff --git a/arch/arm/kernel/traps.c b/arch/arm/kernel/traps.c
index 738a166..573d1aa 100644
--- a/arch/arm/kernel/traps.c
+++ b/arch/arm/kernel/traps.c
@@ -106,7 +106,7 @@ static void dump_mem(const char *lvl, const char *str, unsigned long bottom,
 		unsigned long p;
 		char str[sizeof(" 12345678") * 8 + 1];
 
-		memset(str, ' ', sizeof(str));
+		(void)memset(str, ' ', sizeof(str));
 		str[sizeof(str) - 1] = '\0';
 
 		for (p = first, i = 0; i < 8 && p < top; i++, p += 4) {
@@ -382,9 +382,9 @@ asmlinkage void __exception do_undefinstr(struct pt_regs *regs)
 	if (processor_mode(regs) == SVC_MODE) {
 		instr = *(u32 *) pc;
 	} else if (thumb_mode(regs)) {
-		get_user(instr, (u16 __user *)pc);
+		(void)get_user(instr, (u16 __user *)pc);
 	} else {
-		get_user(instr, (u32 __user *)pc);
+		(void)get_user(instr, (u32 __user *)pc);
 	}
 
 	if (call_undef_hook(regs, instr) == 0)
diff --git a/arch/arm/vfp/vfpmodule.c b/arch/arm/vfp/vfpmodule.c
index d25fabf..9f9953b 100644
--- a/arch/arm/vfp/vfpmodule.c
+++ b/arch/arm/vfp/vfpmodule.c
@@ -56,7 +56,7 @@ static void vfp_thread_flush(struct thread_info *thread)
 	union vfp_state *vfp = &thread->vfpstate;
 	unsigned int cpu;
 
-	memset(vfp, 0, sizeof(union vfp_state));
+	(void)memset(vfp, 0, sizeof(union vfp_state));
 
 	vfp->hard.fpexc = FPEXC_EN;
 	vfp->hard.fpscr = FPSCR_ROUND_NEAREST;
@@ -183,7 +183,7 @@ static void vfp_raise_sigfpe(unsigned int sicode, struct pt_regs *regs)
 {
 	siginfo_t info;
 
-	memset(&info, 0, sizeof(info));
+	(void)memset(&info, 0, sizeof(info));
 
 	info.si_signo = SIGFPE;
 	info.si_code = sicode;
diff --git a/arch/arm/vfp/vfpsingle.c b/arch/arm/vfp/vfpsingle.c
index b252631..90c2b05 100644
--- a/arch/arm/vfp/vfpsingle.c
+++ b/arch/arm/vfp/vfpsingle.c
@@ -308,7 +308,7 @@ u32 vfp_estimate_sqrt_significand(u32 exponent, u32 significand)
 	}
 	{
 		u64 v = (u64)a << 31;
-		do_div(v, z);
+		(void)do_div(v, z);
 		return v + (z >> 1);
 	}
 }
@@ -1117,7 +1117,7 @@ static u32 vfp_single_fdiv(int sd, int sn, s32 m, u32 fpscr)
 	}
 	{
 		u64 significand = (u64)vsn.significand << 32;
-		do_div(significand, vsm.significand);
+		(void)do_div(significand, vsm.significand);
 		vsd.significand = significand;
 	}
 	if ((vsd.significand & 0x3f) == 0)
diff --git a/include/net/sock.h b/include/net/sock.h
index c0b938c..eb9a65e 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -450,7 +450,7 @@ static __inline__ int sk_del_node_init(struct sock *sk)
 
 	if (rc) {
 		/* paranoid for a while -acme */
-		WARN_ON(atomic_read(&sk->sk_refcnt) == 1);
+		(void)WARN_ON(atomic_read(&sk->sk_refcnt) == 1);
 		__sock_put(sk);
 	}
 	return rc;
