diff --git a/arch/arm/mach-msm/smd_rpcrouter.c b/arch/arm/mach-msm/smd_rpcrouter.c
index 983d0c1..61db607 100644
--- a/arch/arm/mach-msm/smd_rpcrouter.c
+++ b/arch/arm/mach-msm/smd_rpcrouter.c
@@ -452,7 +452,7 @@ static struct rr_server *rpcrouter_create_server(uint32_t pid,
 	if (!server)
 		return ERR_PTR(-ENOMEM);
 
-	memset(server, 0, sizeof(struct rr_server));
+	(void)memset(server, 0, sizeof(struct rr_server));
 	server->pid = pid;
 	server->cid = cid;
 	server->prog = prog;
@@ -573,7 +573,7 @@ struct msm_rpc_endpoint *msm_rpcrouter_create_local_endpoint(dev_t dev)
 	ept = kmalloc(sizeof(struct msm_rpc_endpoint), GFP_KERNEL);
 	if (!ept)
 		return NULL;
-	memset(ept, 0, sizeof(struct msm_rpc_endpoint));
+	(void)memset(ept, 0, sizeof(struct msm_rpc_endpoint));
 	ept->cid = (uint32_t) ept;
 	ept->pid = RPCROUTER_PID_LOCAL;
 	ept->dev = dev;
@@ -675,7 +675,7 @@ static int rpcrouter_create_remote_endpoint(uint32_t pid, uint32_t cid)
 	new_c = kmalloc(sizeof(struct rr_remote_endpoint), GFP_KERNEL);
 	if (!new_c)
 		return -ENOMEM;
-	memset(new_c, 0, sizeof(struct rr_remote_endpoint));
+	(void)memset(new_c, 0, sizeof(struct rr_remote_endpoint));
 
 	new_c->cid = cid;
 	new_c->pid = pid;
@@ -772,7 +772,7 @@ static int process_control_msg(struct rpcrouter_xprt_info *xprt_info,
 	switch (msg->cmd) {
 	case RPCROUTER_CTRL_CMD_HELLO:
 		RR("o HELLO PID %d\n", xprt_info->remote_pid);
-		memset(&ctl, 0, sizeof(ctl));
+		(void)memset(&ctl, 0, sizeof(ctl));
 		ctl.cmd = RPCROUTER_CTRL_CMD_HELLO;
 		rpcrouter_send_control_msg(xprt_info, &ctl);
 
@@ -1225,7 +1225,7 @@ fail_data:
 void msm_rpc_setup_req(struct rpc_request_hdr *hdr, uint32_t prog,
 		       uint32_t vers, uint32_t proc)
 {
-	memset(hdr, 0, sizeof(struct rpc_request_hdr));
+	(void)memset(hdr, 0, sizeof(struct rpc_request_hdr));
 	hdr->xid = cpu_to_be32(atomic_add_return(1, &next_xid));
 	hdr->rpc_vers = cpu_to_be32(2);
 	hdr->prog = cpu_to_be32(prog);
@@ -1506,7 +1506,7 @@ static struct msm_rpc_reply *get_avail_reply(struct msm_rpc_endpoint *ept)
 		if (!reply)
 			return 0;
 		D("Adding reply 0x%08x \n", (unsigned int)reply);
-		memset(reply, 0, sizeof(struct msm_rpc_reply));
+		(void)memset(reply, 0, sizeof(struct msm_rpc_reply));
 		spin_lock_irqsave(&ept->reply_q_lock, flags);
 		ept->reply_cnt++;
 		spin_unlock_irqrestore(&ept->reply_q_lock, flags);
@@ -1729,7 +1729,7 @@ int msm_rpc_call_reply(struct msm_rpc_endpoint *ept, uint32_t proc,
 	if (ept->dst_pid == 0xffffffff)
 		return -ENOTCONN;
 
-	memset(req, 0, sizeof(*req));
+	(void)memset(req, 0, sizeof(*req));
 	req->xid = cpu_to_be32(atomic_add_return(1, &next_xid));
 	req->rpc_vers = cpu_to_be32(2);
 	req->prog = ept->dst_prog;
