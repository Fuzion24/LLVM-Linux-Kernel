Signed-off-by: Mark Charlebois <charlebm@gmail.com>
diff --git a/crypto/shash.c b/crypto/shash.c
index 9100912..5ec0ebd 100644
--- a/crypto/shash.c
+++ b/crypto/shash.c
@@ -67,7 +67,8 @@ EXPORT_SYMBOL_GPL(crypto_shash_setkey);
 static inline unsigned int shash_align_buffer_size(unsigned len,
 						   unsigned long mask)
 {
-	return len + (mask & ~(__alignof__(u8 __attribute__ ((aligned))) - 1));
+	// FIXME (aligned not supported) - return len + (mask & ~(__alignof__(u8 __attribute__ ((aligned))) - 1));
+	return len + (mask & ~(__alignof__(u8) - 1));
 }
 
 static int shash_update_unaligned(struct shash_desc *desc, const u8 *data,
diff --git a/mm/slab.c b/mm/slab.c
index f0bd785..1b55992 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -310,7 +310,8 @@ static __always_inline int index_of(const size_t size)
 {
 	extern void __bad_size(void);
 
-	if (__builtin_constant_p(size)) {
+	//if (__builtin_constant_p(size)) {
+	if (1) {
 		int i = 0;
 
 #define CACHE(x) \diff --git a/drivers/mmc/host/mmci.c b/drivers/mmc/host/mmci.c
diff --git a/scripts/Kbuild.include b/scripts/Kbuild.include
index d897278..f09c26d 100644
--- a/scripts/Kbuild.include
+++ b/scripts/Kbuild.include
@@ -106,9 +106,44 @@ as-option = $(call try-run,\
 as-instr = $(call try-run,\
 	/bin/echo -e "$(1)" | $(CC) $(KBUILD_AFLAGS) -c -xassembler -o "$$TMP" -,$(2),$(3))
 
+# Test for clang
+ifeq ($(shell $(CC) --version | grep "clang version" | wc -l), 1)
+
 # cc-option
 # Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)
+cc-option = $(call try-run,\
+	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -xc /dev/null -o "$$TMP" | grep "argument unused during compilation: '$(1)'" | xargs -I{} test -z "{}",$(1),$(2))
+
+# cc-option-yn
+# Usage: flag := $(call cc-option-yn,-march=winchip-c6)
+cc-option-yn = $(call try-run,\
+	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -xc /dev/null -o "$$TMP" | grep "argument unused during compilation: '$(1)'" | xargs -I{} test -z "{}",y,n)
+
+# cc-option-align
+# Prefix align with either -falign or -malign
+cc-option-align = $(subst -functions=0,,\
+	$(call cc-option,-falign-functions=0,-malign-functions=0))
 
+# cc-disable-warning
+# Usage: cflags-y += $(call cc-disable-warning,unused-but-set-variable)
+cc-disable-warning = $(call try-run,\
+	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) -W$(strip $(1)) -c -xc /dev/null -o "$$TMP" | grep "argument unused during compilation: '$(1)'" | xargs -I{} test -z "{}",-Wno-$(strip $(1)))
+
+# cc-version and cc-fullversion are not used in clang supported targets
+
+# cc-version
+# Usage gcc-ver := $(call cc-version)
+cc-version = 0
+
+# cc-fullversion
+# Usage gcc-ver := $(call cc-fullversion)
+cc-fullversion = 0
+
+# Otherwise assume GCC or something compatible
+else
+
+# cc-option
+# Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)
 cc-option = $(call try-run,\
 	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -xc /dev/null -o "$$TMP",$(1),$(2))
 
@@ -135,6 +170,7 @@ cc-version = $(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-version.sh $(CC))
 # Usage gcc-ver := $(call cc-fullversion)
 cc-fullversion = $(shell $(CONFIG_SHELL) \
 	$(srctree)/scripts/gcc-version.sh -p $(CC))
+endif
 
 # cc-ifversion
 # Usage:  EXTRA_CFLAGS += $(call cc-ifversion, -lt, 0402, -O1)
diff --git a/Makefile b/Makefile
index 1932984..6e6ade9 100644
--- a/Makefile
+++ b/Makefile
@@ -371,7 +371,7 @@ KBUILD_CFLAGS   := -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \
 		   -fno-delete-null-pointer-checks
 KBUILD_AFLAGS_KERNEL :=
 KBUILD_CFLAGS_KERNEL :=
-KBUILD_AFLAGS   := -D__ASSEMBLY__
+KBUILD_AFLAGS   := -D__ASSEMBLY__ -no-integrated-as
 KBUILD_AFLAGS_MODULE  := -DMODULE
 KBUILD_CFLAGS_MODULE  := -DMODULE
 KBUILD_LDFLAGS_MODULE := -T $(srctree)/scripts/module-common.lds

@@ -577,7 +577,7 @@ endif
 
 # This warning generated too much noise in a regular build.
 # Use make W=1 to enable this warning (see scripts/Makefile.build)
-KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)
+KBUILD_CFLAGS += $(call cc-disable-warning, unused-value)
 
 ifdef CONFIG_FRAME_POINTER
 KBUILD_CFLAGS  += -fno-omit-frame-pointer -fno-optimize-sibling-calls
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index d2b366c..039e0b4 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -69,6 +69,7 @@ warning-1 += -Wmissing-prototypes
 warning-1 += -Wold-style-definition
 warning-1 += $(call cc-option, -Wmissing-include-dirs)
 warning-1 += $(call cc-option, -Wunused-but-set-variable)
+warning-1 += $(call cc-option, -Wunused-value)
 
 warning-2 := -Waggregate-return
diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
index 2533fdd..caea127 100644
--- a/include/asm-generic/cmpxchg-local.h
+++ b/include/asm-generic/cmpxchg-local.h
@@ -41,6 +41,7 @@ static inline unsigned long __cmpxchg_local_generic(volatile void *ptr,
 		break;
 	default:
 		wrong_size_cmpxchg(ptr);
+		prev=0;
 	}
 	local_irq_restore(flags);
 	return prev;
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 311be90..544bc0e 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -336,12 +336,14 @@ static inline void compound_unlock(struct page *page)
 
 static inline unsigned long compound_lock_irqsave(struct page *page)
 {
-	unsigned long uninitialized_var(flags);
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
+	unsigned long uninitialized_var(flags);
 	local_irq_save(flags);
 	compound_lock(page);
-#endif
 	return flags;
+#else
+	return 0UL;
+#endif
 }
 
 static inline void compound_unlock_irqrestore(struct page *page,
