Common issues patched to compile with clang

Signed-off-by: Mark Charlebois <charlebm@gmail.com>
---
 Makefile                            |    2 +-
 crypto/shash.c                      |    3 ++-
 include/asm-generic/cmpxchg-local.h |    1 +
 include/linux/mm.h                  |    6 ++++--
 mm/slab.c                           |    3 ++-
 scripts/Kbuild.include              |   36 ++++++++++++++++++++++++++++++++++++
 scripts/Makefile.build              |    1 +
 7 files changed, 47 insertions(+), 5 deletions(-)

Index: linux/crypto/shash.c
===================================================================
--- linux.orig/crypto/shash.c	2012-09-06 14:07:04.858905273 -0400
+++ linux/crypto/shash.c	2012-09-06 14:07:48.686354288 -0400
@@ -67,7 +67,8 @@
 static inline unsigned int shash_align_buffer_size(unsigned len,
 						   unsigned long mask)
 {
-	return len + (mask & ~(__alignof__(u8 __attribute__ ((aligned))) - 1));
+	// FIXME (aligned not supported) - return len + (mask & ~(__alignof__(u8 __attribute__ ((aligned))) - 1));
+	return len + (mask & ~(__alignof__(u8) - 1));
 }
 
 static int shash_update_unaligned(struct shash_desc *desc, const u8 *data,
Index: linux/mm/slab.c
===================================================================
--- linux.orig/mm/slab.c	2012-09-06 14:07:04.870905123 -0400
+++ linux/mm/slab.c	2012-09-06 14:07:48.686354288 -0400
@@ -342,7 +342,8 @@
 {
 	extern void __bad_size(void);
 
-	if (__builtin_constant_p(size)) {
+	//if (__builtin_constant_p(size)) {
+	if (1) {
 		int i = 0;
 
 #define CACHE(x) \
Index: linux/scripts/Kbuild.include
===================================================================
--- linux.orig/scripts/Kbuild.include	2012-09-06 14:07:04.890904871 -0400
+++ linux/scripts/Kbuild.include	2012-09-06 14:09:05.741385626 -0400
@@ -106,9 +106,44 @@
 as-instr = $(call try-run,\
 	printf "%b\n" "$(1)" | $(CC) $(KBUILD_AFLAGS) -c -xassembler -o "$$TMP" -,$(2),$(3))
 
+# Test for clang
+ifeq ($(shell $(CC) -v 2>/dev/null | grep -c "clang version"), 1)
+
 # cc-option
 # Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)
+cc-option = $(call try-run,\
+	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -xc /dev/null -o "$$TMP" 2>&1 | grep -q "argument unused during compilation: '$(1)'",$(2),$(1))
 
+# cc-option-yn
+# Usage: flag := $(call cc-option-yn,-march=winchip-c6)
+cc-option-yn = $(call try-run,\
+	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -xc /dev/null -o "$$TMP" 2>&1 | grep -q "argument unused during compilation: '$(1)'",n,y)
+
+# cc-option-align
+# Prefix align with either -falign or -malign
+cc-option-align = $(subst -functions=0,,\
+	$(call cc-option,-falign-functions=0,-malign-functions=0))
+
+# cc-disable-warning
+# Usage: cflags-y += $(call cc-disable-warning,unused-but-set-variable)
+cc-disable-warning = $(call try-run,\
+	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) -W$(strip $(1)) -c -xc /dev/null -o "$$TMP" 2>&1 | grep -q "argument unused during compilation: '$(1)'",,-Wno-$(strip $(1)))
+
+# cc-version and cc-fullversion are not used in clang supported targets
+
+# cc-version
+# Usage gcc-ver := $(call cc-version)
+cc-version = 0
+
+# cc-fullversion
+# Usage gcc-ver := $(call cc-fullversion)
+cc-fullversion = 0
+
+# Otherwise assume GCC or something compatible
+else
+
+# cc-option
+# Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)
 cc-option = $(call try-run,\
 	$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -xc /dev/null -o "$$TMP",$(1),$(2))
 
@@ -135,6 +170,7 @@
 # Usage gcc-ver := $(call cc-fullversion)
 cc-fullversion = $(shell $(CONFIG_SHELL) \
 	$(srctree)/scripts/gcc-version.sh -p $(CC))
+endif
 
 # cc-ifversion
 # Usage:  EXTRA_CFLAGS += $(call cc-ifversion, -lt, 0402, -O1)
Index: linux/Makefile
===================================================================
--- linux.orig/Makefile	2012-09-06 14:07:04.878905022 -0400
+++ linux/Makefile	2012-09-06 14:07:48.686354288 -0400
@@ -366,7 +366,7 @@
 		   -fno-delete-null-pointer-checks
 KBUILD_AFLAGS_KERNEL :=
 KBUILD_CFLAGS_KERNEL :=
-KBUILD_AFLAGS   := -D__ASSEMBLY__
+KBUILD_AFLAGS   := -D__ASSEMBLY__ -no-integrated-as
 KBUILD_AFLAGS_MODULE  := -DMODULE
 KBUILD_CFLAGS_MODULE  := -DMODULE
 KBUILD_LDFLAGS_MODULE := -T $(srctree)/scripts/module-common.lds
Index: linux/scripts/Makefile.build
===================================================================
--- linux.orig/scripts/Makefile.build	2012-09-06 14:07:04.902904721 -0400
+++ linux/scripts/Makefile.build	2012-09-06 14:07:48.686354288 -0400
@@ -69,6 +69,7 @@
 warning-1 += -Wold-style-definition
 warning-1 += $(call cc-option, -Wmissing-include-dirs)
 warning-1 += $(call cc-option, -Wunused-but-set-variable)
+warning-1 += $(call cc-option, -Wunused-value)
 warning-1 += $(call cc-disable-warning, missing-field-initializers)
 
 warning-2 := -Waggregate-return
Index: linux/include/asm-generic/cmpxchg-local.h
===================================================================
--- linux.orig/include/asm-generic/cmpxchg-local.h	2012-09-06 14:07:04.930904368 -0400
+++ linux/include/asm-generic/cmpxchg-local.h	2012-09-06 14:07:48.686354288 -0400
@@ -41,6 +41,7 @@
 		break;
 	default:
 		wrong_size_cmpxchg(ptr);
+		prev=0;
 	}
 	local_irq_restore(flags);
 	return prev;
Index: linux/include/linux/mm.h
===================================================================
--- linux.orig/include/linux/mm.h	2012-09-06 14:07:04.914904568 -0400
+++ linux/include/linux/mm.h	2012-09-06 14:07:48.686354288 -0400
@@ -336,12 +336,14 @@
 
 static inline unsigned long compound_lock_irqsave(struct page *page)
 {
-	unsigned long uninitialized_var(flags);
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
+	unsigned long uninitialized_var(flags);
 	local_irq_save(flags);
 	compound_lock(page);
-#endif
 	return flags;
+#else
+	return 0UL;
+#endif
 }
 
 static inline void compound_unlock_irqrestore(struct page *page,
