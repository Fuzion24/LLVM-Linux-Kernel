Replaced use of VLAIS in xt_repldata.h with a flexible array member
and the calculated offsets of other struct members and ued pointers
to the data. Per the file, these data are not reference by name
and the memory layout is preserved.

This patch was updated for corrections and to add any trailing 
padding that the structure would have originally allocated using 
VLAIS.

The original code seems to assume that there will be no pad bytes 
between tbl->entries[nhooks] and tbl->term or the following 
calculation would be incorrect:

tbl->repl.size = nhooks * sizeof(struct type##_standard) + \
                        sizeof(struct type##_error); \


Signed-off-by: Mark Charlebois <charlebm@gmail.com>
---
 net/netfilter/xt_repldata.h | 31 +++++++++++++++++++++++++------
 1 file changed, 25 insertions(+), 6 deletions(-)

--- linux.orig/net/netfilter/xt_repldata.h
+++ linux/net/netfilter/xt_repldata.h
@@ -5,29 +5,49 @@
  * they serve as the hanging-off data accessed through repl.data[].
  */
 
+#define padbytes(offset, type) ((-offset) & (__alignof__(type)-1))
+
+/* tbl has the following structure equivalent, but without using VLAIS:
+ * struct {
+ *	struct type##_replace repl;
+ *	struct type##_standard entries[nhooks];
+ *	struct type##_error term;
+ * } *tbl;
+ */
+
 #define xt_alloc_initial_table(type, typ2) ({ \
 	unsigned int hook_mask = info->valid_hooks; \
 	unsigned int nhooks = hweight32(hook_mask); \
 	unsigned int bytes = 0, hooknum = 0, i = 0; \
 	struct { \
 		struct type##_replace repl; \
-		struct type##_standard entries[nhooks]; \
-		struct type##_error term; \
-	} *tbl = kzalloc(sizeof(*tbl), GFP_KERNEL); \
+		char data[0]; \
+	} *tbl; \
+	struct type##_standard *entries; \
+	struct type##_error *term; \
+	size_t pad1 = padbytes(sizeof(tbl->repl), *entries); \
+	size_t offset = pad1 + nhooks * sizeof(*entries); \
+	size_t pad2 = padbytes(sizeof(tbl->repl)+offset, *term); \
+	size_t offset2 = offset + pad2 + sizeof(*term); \
+	size_t pad3 = padbytes(sizeof(tbl2->repl)+offset2, tbl2->repl); \
+	size_t tbl_sz = sizeof(tbl->repl) + offset2 + pad3; \
+	tbl = kzalloc(tbl_sz, GFP_KERNEL); \
 	if (tbl == NULL) \
 		return NULL; \
+	entries = (struct type##_standard *)&tbl->data[pad1]; \
+	term = (struct type##_error *)&tbl->data[offset+pad2]; \
 	strncpy(tbl->repl.name, info->name, sizeof(tbl->repl.name)); \
-	tbl->term = (struct type##_error)typ2##_ERROR_INIT;  \
+	*term = (struct type##_error)typ2##_ERROR_INIT;  \
 	tbl->repl.valid_hooks = hook_mask; \
 	tbl->repl.num_entries = nhooks + 1; \
 	tbl->repl.size = nhooks * sizeof(struct type##_standard) + \
-	                 sizeof(struct type##_error); \
+			 sizeof(struct type##_error); \
 	for (; hook_mask != 0; hook_mask >>= 1, ++hooknum) { \
 		if (!(hook_mask & 1)) \
 			continue; \
 		tbl->repl.hook_entry[hooknum] = bytes; \
 		tbl->repl.underflow[hooknum]  = bytes; \
-		tbl->entries[i++] = (struct type##_standard) \
+		entries[i++] = (struct type##_standard) \
 			typ2##_STANDARD_INIT(NF_ACCEPT); \
 		bytes += sizeof(struct type##_standard); \
 	} \
