From 69cbff315578ef3b9497c5ce5dd552d12470453b Mon Sep 17 00:00:00 2001
From: David Woodhouse <David.Woodhouse@intel.com>
Date: Wed, 8 Jan 2014 11:21:23 +0000
Subject: [PATCH] x86, boot: Work around clang PR18415.

Clang's intrinsics ignore -mregparm=3 when they fall back to calling the
out-of-line implementations. Putting the args on the stack when memcpy()
expects them in registers is not a recipe for a happy kernel.

This bites with -m32 too, so clang is presumably catastrophically
broken for the i386 kernel until this is fixed, unless I'm missing
something.

For information/testing only; do not apply. With this, I can use
'clang -m16' to build all the kernel's 16-bit code and get a successful
boot.

Not-signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
---
 arch/x86/boot/boot.h   | 2 ++
 arch/x86/boot/memory.c | 7 ++++++-
 2 files changed, 8 insertions(+), 1 deletion(-)

--- linux.orig/arch/x86/boot/string.h
+++ linux/arch/x86/boot/string.h
@@ -14,8 +14,10 @@
  * Access builtin version by default. If one needs to use optimized version,
  * do "undef memcpy" in .c file and link against right string.c
  */
+#ifndef __clang__ /* PR18415 */
 #define memcpy(d,s,l) __builtin_memcpy(d,s,l)
 #define memset(d,c,l) __builtin_memset(d,c,l)
 #define memcmp	__builtin_memcmp
+#endif
 
 #endif /* BOOT_STRING_H */
--- linux.orig/arch/x86/boot/memory.c
+++ linux/arch/x86/boot/memory.c
@@ -63,8 +63,13 @@
 			count = 0;
 			break;
 		}
-
+#ifdef __clang__
+		/* PR18415 */
+		memcpy(desc, &buf, sizeof(*desc));
+		desc++;
+#else
 		*desc++ = buf;
+#endif
 		count++;
 	} while (ireg.ebx && count < ARRAY_SIZE(boot_params.e820_map));
 
