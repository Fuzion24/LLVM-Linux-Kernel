--- linux.orig/arch/x86/include/asm/uaccess.h
+++ linux/arch/x86/include/asm/uaccess.h
@@ -159,8 +159,24 @@
  * (%ecx being the next register in gcc's x86 register sequence), and
  * %rdx on 64 bits.
  */
-#define get_user(x, ptr)						\
-({									\
+#if defined(__x86_64__) && defined(__clang__)
+/* clang needs to use the right size for the register */
+#   define get_user(x, ptr)						\
+    ({									\
+	int __ret_gu;							\
+	register __inttype(*(ptr)) __val_gu asm("%rdx");		\
+	__chk_user_ptr(ptr);						\
+	might_fault();							\
+	asm volatile("call __get_user_%P3"				\
+		     : "=a" (__ret_gu), "=r" (__val_gu)			\
+		     : "0" (ptr), "i" (sizeof(*(ptr))));		\
+	(x) = (__typeof__(*(ptr))) __val_gu;				\
+	__ret_gu;							\
+    })
+#else
+/* gcc */
+#   define get_user(x, ptr)						\
+    ({									\
 	int __ret_gu;							\
 	register __inttype(*(ptr)) __val_gu asm("%edx");		\
 	__chk_user_ptr(ptr);						\
@@ -170,7 +186,8 @@
 		     : "0" (ptr), "i" (sizeof(*(ptr))));		\
 	(x) = (__typeof__(*(ptr))) __val_gu;				\
 	__ret_gu;							\
-})
+    })
+#endif
 
 #define __put_user_x(size, x, ptr, __ret_pu)			\
 	asm volatile("call __put_user_" #size : "=a" (__ret_pu)	\
