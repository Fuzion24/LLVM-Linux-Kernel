From 7965f07476cb3c03d8f61499b3bfd69116401cfb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan-Simon=20M=C3=B6ller?= <dl9pf@gmx.de>
Date: Tue, 10 Jul 2012 15:27:30 +0200
Subject: [PATCH 6/6] pax-linux-llvm  x86_integrated-as-macro.patch

Patch from series at http://lists.cs.uiuc.edu/pipermail/llvm-commits/Week-of-Mon-20120507/142707.html by PaX Team.

http://lists.linuxfoundation.org/pipermail/llvmlinux/2012-July/000005.html
---
 lib/MC/MCParser/AsmParser.cpp       |  222 ++++++++++++++++++++++-------------
 test/MC/AsmParser/exprs.s           |    2 +-
 test/MC/AsmParser/macro-args.s      |    9 ++
 test/MC/AsmParser/macro-rept-err1.s |    2 +-
 4 files changed, 149 insertions(+), 86 deletions(-)

Index: llvm/lib/MC/MCParser/AsmParser.cpp
===================================================================
--- llvm.orig/lib/MC/MCParser/AsmParser.cpp	2012-07-20 15:19:33.912753423 -0400
+++ llvm/lib/MC/MCParser/AsmParser.cpp	2012-07-20 15:19:51.536269838 -0400
@@ -46,14 +46,17 @@
 
 /// \brief Helper class for tracking macro definitions.
 typedef std::vector<AsmToken> MacroArgument;
+typedef std::vector<MacroArgument> MacroArguments;
+typedef std::pair<StringRef, MacroArgument> MacroParameter;
+typedef std::vector<MacroParameter> MacroParameters;
 
 struct Macro {
   StringRef Name;
   StringRef Body;
-  std::vector<StringRef> Parameters;
+  MacroParameters Parameters;
 
 public:
-  Macro(StringRef N, StringRef B, const std::vector<StringRef> &P) :
+  Macro(StringRef N, StringRef B, const MacroParameters &P) :
     Name(N), Body(B), Parameters(P) {}
 };
 
@@ -180,9 +183,10 @@
   bool ParseCppHashLineFilenameComment(const SMLoc &L);
 
   bool HandleMacroEntry(StringRef Name, SMLoc NameLoc, const Macro *M);
-  bool expandMacro(raw_svector_ostream &OS, StringRef Body,
-                   const std::vector<StringRef> &Parameters,
-                   const std::vector<MacroArgument> &A,
+  bool expandMacro(SmallString<256> &Buf, StringRef Body,
+                   StringRef Name,
+                   const MacroParameters &Parameters,
+                   const MacroArguments &A,
                    const SMLoc &L);
   void HandleMacroExit();
 
@@ -207,7 +211,7 @@
   void EatToEndOfStatement();
 
   bool ParseMacroArgument(MacroArgument &MA);
-  bool ParseMacroArguments(const Macro *M, std::vector<MacroArgument> &A);
+  bool ParseMacroArguments(const Macro *M, MacroArguments &A);
 
   /// \brief Parse up to the end of statement and a return the contents from the
   /// current token until the end of the statement; the current token on exit
@@ -273,9 +277,9 @@
                                     MCSymbolRefExpr::VariantKind Variant);
 
   // Macro-like directives
-  Macro *ParseMacroLikeBody(SMLoc DirectiveLoc);
+  Macro *ParseMacroLikeBody(SMLoc DirectiveLoc, MacroParameters &Parameters);
   void InstantiateMacroLikeBody(Macro *M, SMLoc DirectiveLoc,
-                                raw_svector_ostream &OS);
+                                SmallString<256> &Buf);
   bool ParseDirectiveRept(SMLoc DirectiveLoc); // ".rept"
   bool ParseDirectiveIrp(SMLoc DirectiveLoc);  // ".irp"
   bool ParseDirectiveIrpc(SMLoc DirectiveLoc); // ".irpc"
@@ -1454,20 +1458,27 @@
     NewDiag.print(0, OS);
 }
 
-bool AsmParser::expandMacro(raw_svector_ostream &OS, StringRef Body,
-                            const std::vector<StringRef> &Parameters,
-                            const std::vector<MacroArgument> &A,
+bool AsmParser::expandMacro(SmallString<256> &Buf, StringRef Body,
+                            StringRef Name,
+                            const MacroParameters &Parameters,
+                            const MacroArguments &A,
                             const SMLoc &L) {
+  raw_svector_ostream OS(Buf);
   unsigned NParameters = Parameters.size();
   if (NParameters != 0 && NParameters != A.size())
     return Error(L, "Wrong number of arguments");
 
+  // a macro without parameters is handled differently on Darwin
+  // gas accepts no arguments and does no substitutions then
+  // FIXME: this is the same hack as initializing PlatformParser
+  bool isDarwin = !NParameters && MAI.hasSubsectionsViaSymbols();
+
   while (!Body.empty()) {
     // Scan for the next substitution.
     std::size_t End = Body.size(), Pos = 0;
     for (; Pos != End; ++Pos) {
       // Check for a substitution or escape.
-      if (!NParameters) {
+      if (isDarwin) {
         // This macro has no parameters, look for $0, $1, etc.
         if (Body[Pos] != '$' || Pos + 1 == End)
           continue;
@@ -1475,7 +1486,7 @@
         char Next = Body[Pos + 1];
         if (Next == '$' || Next == 'n' || isdigit(Next))
           break;
-      } else {
+      } else if (NParameters) {
         // This macro has parameters, look for \foo, \bar, etc.
         if (Body[Pos] == '\\' && Pos + 1 != End)
           break;
@@ -1489,7 +1500,7 @@
     if (Pos == End)
       break;
 
-    if (!NParameters) {
+    if (isDarwin) {
       switch (Body[Pos+1]) {
         // $$ => $
       case '$':
@@ -1516,27 +1527,35 @@
       }
       }
       Pos += 2;
-    } else {
+    } else if (NParameters) {
       unsigned I = Pos + 1;
-      while (isalnum(Body[I]) && I + 1 != End)
+      while ((isalnum(Body[I]) || Body[I] == '_') && I + 1 != End)
         ++I;
 
       const char *Begin = Body.data() + Pos +1;
       StringRef Argument(Begin, I - (Pos +1));
       unsigned Index = 0;
       for (; Index < NParameters; ++Index)
-        if (Parameters[Index] == Argument)
+        if (Parameters[Index].first == Argument)
           break;
 
-      // FIXME: We should error at the macro definition.
-      if (Index == NParameters)
-        return Error(L, "Parameter not found");
-
-      for (MacroArgument::const_iterator it = A[Index].begin(),
-             ie = A[Index].end(); it != ie; ++it)
-        OS << it->getString();
+      if (Index == NParameters) {
+          if (Body[Pos+1] == '(' && Body[Pos+2] == ')')
+            Pos += 3;
+          else {
+            OS << '\\' << Argument;
+            Pos = I;
+          }
+      } else {
+        for (MacroArgument::const_iterator it = A[Index].begin(),
+               ie = A[Index].end(); it != ie; ++it)
+          if (it->getKind() == AsmToken::String)
+            OS << it->getStringContents();
+          else
+            OS << it->getString();
 
-      Pos += 1 + Argument.size();
+        Pos += 1 + Argument.size();
+      }
     }
     // Update the scan point.
     Body = Body.substr(Pos);
@@ -1557,6 +1576,10 @@
 bool AsmParser::ParseMacroArgument(MacroArgument &MA) {
   unsigned ParenLevel = 0;
 
+  // gas accepts arguments separated by whitespace
+  // FIXME: this is the same hack as initializing PlatformParser
+  bool isDarwin = MAI.hasSubsectionsViaSymbols();
+
   for (;;) {
     SMLoc LastTokenLoc;
 
@@ -1569,6 +1592,9 @@
       break;
     if (ParenLevel == 0 && Lexer.is(AsmToken::Comma))
       break;
+    if (ParenLevel == 0 && !MA.empty() && !isDarwin &&
+        Lexer.getLoc().getPointer() - MA.back().getEndLoc().getPointer() != 1)
+      break;
 
     // Adjust the current parentheses level.
     if (Lexer.is(AsmToken::LParen))
@@ -1586,8 +1612,7 @@
 }
 
 // Parse the macro instantiation arguments.
-bool AsmParser::ParseMacroArguments(const Macro *M,
-                                    std::vector<MacroArgument> &A) {
+bool AsmParser::ParseMacroArguments(const Macro *M, MacroArguments &A) {
   const unsigned NParameters = M ? M->Parameters.size() : 0;
 
   // Parse two kinds of macro invocations:
@@ -1602,13 +1627,19 @@
 
     if (!MA.empty())
       A.push_back(MA);
-    if (Lexer.is(AsmToken::EndOfStatement))
-      return false;
+    else if (NParameters) {
+      if (M->Parameters[Parameter].second.empty())
+        return TokError("macro argument '" +
+                        Twine(M->Parameters[Parameter].first) +
+                        "' is missing");
+      A.push_back(M->Parameters[Parameter].second);
+    } else if (Lexer.is(AsmToken::EndOfStatement))
+      break;
 
     if (Lexer.is(AsmToken::Comma))
       Lex();
   }
-  return TokError("Too many arguments");
+  return false;
 }
 
 bool AsmParser::HandleMacroEntry(StringRef Name, SMLoc NameLoc,
@@ -1618,8 +1649,8 @@
   if (ActiveMacros.size() == 20)
     return TokError("macros cannot be nested more than 20 levels deep");
 
-  std::vector<MacroArgument> MacroArguments;
-  if (ParseMacroArguments(M, MacroArguments))
+  MacroArguments A;
+  if (ParseMacroArguments(M, A))
     return true;
 
   // Macro instantiation is lexical, unfortunately. We construct a new buffer
@@ -1628,12 +1659,12 @@
   StringRef Body = M->Body;
   raw_svector_ostream OS(Buf);
 
-  if (expandMacro(OS, Body, M->Parameters, MacroArguments, getTok().getLoc()))
+  if (expandMacro(Buf, Body, Name, M->Parameters, A, getTok().getLoc()))
     return true;
 
   // We include the .endmacro in the buffer as our queue to exit the macro
   // instantiation.
-  OS << ".endmacro\n";
+  Buf.append(".endmacro\n");
 
   MemoryBuffer *Instantiation =
     MemoryBuffer::getMemBufferCopy(OS.str(), "<instantiation>");
@@ -3104,46 +3135,61 @@
                                            SMLoc DirectiveLoc) {
   StringRef Name;
   if (getParser().ParseIdentifier(Name))
-    return TokError("expected identifier in directive");
+    return TokError("expected identifier in '.macro' directive");
 
-  std::vector<StringRef> Parameters;
+  MacroParameters Parameters;
   if (getLexer().isNot(AsmToken::EndOfStatement)) {
-    for(;;) {
-      StringRef Parameter;
-      if (getParser().ParseIdentifier(Parameter))
-        return TokError("expected identifier in directive");
+    for (;;) {
+      MacroParameter Parameter;
+      if (getParser().ParseIdentifier(Parameter.first))
+        return TokError("expected identifier in '.macro' directive");
+
+      if (getLexer().is(AsmToken::Equal)) {
+        Lex();
+        if (getParser().ParseMacroArgument(Parameter.second))
+          return true;
+      }
+
       Parameters.push_back(Parameter);
 
-      if (getLexer().isNot(AsmToken::Comma))
+      if (getLexer().is(AsmToken::EndOfStatement))
         break;
-      Lex();
+
+      if (getLexer().is(AsmToken::Comma))
+        Lex();
     }
   }
 
-  if (getLexer().isNot(AsmToken::EndOfStatement))
-    return TokError("unexpected token in '.macro' directive");
-
   // Eat the end of statement.
   Lex();
 
   AsmToken EndToken, StartToken = getTok();
 
   // Lex the macro definition.
+  unsigned NestLevel = 0;
   for (;;) {
     // Check whether we have reached the end of the file.
     if (getLexer().is(AsmToken::Eof))
       return Error(DirectiveLoc, "no matching '.endmacro' in definition");
 
+    if (getLexer().is(AsmToken::Identifier) &&
+         getTok().getIdentifier() == ".macro") {
+      ++NestLevel;
+    }
+
     // Otherwise, check whether we have reach the .endmacro.
     if (getLexer().is(AsmToken::Identifier) &&
         (getTok().getIdentifier() == ".endm" ||
          getTok().getIdentifier() == ".endmacro")) {
-      EndToken = getTok();
-      Lex();
-      if (getLexer().isNot(AsmToken::EndOfStatement))
-        return TokError("unexpected token in '" + EndToken.getIdentifier() +
-                        "' directive");
-      break;
+      if (NestLevel == 0) {
+        EndToken = getTok();
+        Lex();
+        if (getLexer().isNot(AsmToken::EndOfStatement))
+          return TokError("unexpected token in '" + EndToken.getIdentifier() +
+                          "' directive");
+        break;
+      }
+      --NestLevel;
     }
 
     // Otherwise, scan til the end of the statement.
@@ -3165,7 +3211,7 @@
 /// ::= .endm
 /// ::= .endmacro
 bool GenericAsmParser::ParseDirectiveEndMacro(StringRef Directive,
-                                           SMLoc DirectiveLoc) {
+                                              SMLoc DirectiveLoc) {
   if (getLexer().isNot(AsmToken::EndOfStatement))
     return TokError("unexpected token in '" + Directive + "' directive");
 
@@ -3222,7 +3268,10 @@
   return false;
 }
 
-Macro *AsmParser::ParseMacroLikeBody(SMLoc DirectiveLoc) {
+// Helper functions for parsing macro-like directives
+
+Macro *AsmParser::ParseMacroLikeBody(SMLoc DirectiveLoc,
+                                     MacroParameters &Parameters) {
   AsmToken EndToken, StartToken = getTok();
 
   unsigned NestLevel = 0;
@@ -3234,7 +3283,9 @@
     }
 
     if (Lexer.is(AsmToken::Identifier) &&
-        (getTok().getIdentifier() == ".rept")) {
+        (getTok().getIdentifier() == ".rept" ||
+         getTok().getIdentifier() == ".irp" ||
+         getTok().getIdentifier() == ".irpc")) {
       ++NestLevel;
     }
 
@@ -3263,16 +3314,15 @@
 
   // We Are Anonymous.
   StringRef Name;
-  std::vector<StringRef> Parameters;
   return new Macro(Name, Body, Parameters);
 }
 
 void AsmParser::InstantiateMacroLikeBody(Macro *M, SMLoc DirectiveLoc,
-                                         raw_svector_ostream &OS) {
-  OS << ".endr\n";
+                                         SmallString<256> &Buf) {
+  Buf.append(".endr\n");
 
   MemoryBuffer *Instantiation =
-    MemoryBuffer::getMemBufferCopy(OS.str(), "<instantiation>");
+    MemoryBuffer::getMemBufferCopy(Buf.str(), "<instantiation>");
 
   // Create the macro instantiation object and add to the current macro
   // instantiation stack.
@@ -3287,6 +3337,12 @@
   Lex();
 }
 
+// These macro-like directives fundamentally behave as macros but they
+// - are anonymous
+// - instantiate immediately (in multiple instances)
+
+/// ParseDirectiveRept
+/// ::= .rept count
 bool AsmParser::ParseDirectiveRept(SMLoc DirectiveLoc) {
   int64_t Count;
   if (ParseAbsoluteExpression(Count))
@@ -3302,21 +3358,20 @@
   Lex();
 
   // Lex the rept definition.
-  Macro *M = ParseMacroLikeBody(DirectiveLoc);
+  MacroParameters Parameters;
+  Macro *M = ParseMacroLikeBody(DirectiveLoc, Parameters);
   if (!M)
     return true;
 
   // Macro instantiation is lexical, unfortunately. We construct a new buffer
   // to hold the macro body with substitutions.
   SmallString<256> Buf;
-  std::vector<StringRef> Parameters;
-  const std::vector<MacroArgument> A;
-  raw_svector_ostream OS(Buf);
+  MacroArguments A;
   while (Count--) {
-    if (expandMacro(OS, M->Body, Parameters, A, getTok().getLoc()))
+    if (expandMacro(Buf, M->Body, M->Name, Parameters, A, getTok().getLoc()))
       return true;
   }
-  InstantiateMacroLikeBody(M, DirectiveLoc, OS);
+  InstantiateMacroLikeBody(M, DirectiveLoc, Buf);
 
   return false;
 }
@@ -3324,10 +3379,10 @@
 /// ParseDirectiveIrp
 /// ::= .irp symbol,values
 bool AsmParser::ParseDirectiveIrp(SMLoc DirectiveLoc) {
-  std::vector<StringRef> Parameters;
-  StringRef Parameter;
+  MacroParameters Parameters;
+  MacroParameter Parameter;
 
-  if (ParseIdentifier(Parameter))
+  if (ParseIdentifier(Parameter.first))
     return TokError("expected identifier in '.irp' directive");
 
   Parameters.push_back(Parameter);
@@ -3337,7 +3392,7 @@
 
   Lex();
 
-  std::vector<MacroArgument> A;
+  MacroArguments A;
   if (ParseMacroArguments(0, A))
     return true;
 
@@ -3345,25 +3400,23 @@
   Lex();
 
   // Lex the irp definition.
-  Macro *M = ParseMacroLikeBody(DirectiveLoc);
+  Macro *M = ParseMacroLikeBody(DirectiveLoc, Parameters);
   if (!M)
     return true;
 
   // Macro instantiation is lexical, unfortunately. We construct a new buffer
   // to hold the macro body with substitutions.
   SmallString<256> Buf;
-  raw_svector_ostream OS(Buf);
 
-  for (std::vector<MacroArgument>::iterator i = A.begin(), e = A.end(); i != e;
-       ++i) {
-    std::vector<MacroArgument> Args;
+  for (MacroArguments::iterator i = A.begin(), e = A.end(); i != e; ++i) {
+    MacroArguments Args;
     Args.push_back(*i);
 
-    if (expandMacro(OS, M->Body, Parameters, Args, getTok().getLoc()))
+    if (expandMacro(Buf, M->Body, M->Name, Parameters, Args, getTok().getLoc()))
       return true;
   }
 
-  InstantiateMacroLikeBody(M, DirectiveLoc, OS);
+  InstantiateMacroLikeBody(M, DirectiveLoc, Buf);
 
   return false;
 }
@@ -3371,10 +3424,10 @@
 /// ParseDirectiveIrpc
 /// ::= .irpc symbol,values
 bool AsmParser::ParseDirectiveIrpc(SMLoc DirectiveLoc) {
-  std::vector<StringRef> Parameters;
-  StringRef Parameter;
+  MacroParameters Parameters;
+  MacroParameter Parameter;
 
-  if (ParseIdentifier(Parameter))
+  if (ParseIdentifier(Parameter.first))
     return TokError("expected identifier in '.irpc' directive");
 
   Parameters.push_back(Parameter);
@@ -3384,7 +3437,7 @@
 
   Lex();
 
-  std::vector<MacroArgument> A;
+  MacroArguments A;
   if (ParseMacroArguments(0, A))
     return true;
 
@@ -3395,14 +3448,13 @@
   Lex();
 
   // Lex the irpc definition.
-  Macro *M = ParseMacroLikeBody(DirectiveLoc);
+  Macro *M = ParseMacroLikeBody(DirectiveLoc, Parameters);
   if (!M)
     return true;
 
   // Macro instantiation is lexical, unfortunately. We construct a new buffer
   // to hold the macro body with substitutions.
   SmallString<256> Buf;
-  raw_svector_ostream OS(Buf);
 
   StringRef Values = A.front().front().getString();
   std::size_t I, End = Values.size();
@@ -3410,18 +3462,20 @@
     MacroArgument Arg;
     Arg.push_back(AsmToken(AsmToken::Identifier, Values.slice(I, I+1)));
 
-    std::vector<MacroArgument> Args;
+    MacroArguments Args;
     Args.push_back(Arg);
 
-    if (expandMacro(OS, M->Body, Parameters, Args, getTok().getLoc()))
+    if (expandMacro(Buf, M->Body, M->Name, Parameters, Args, getTok().getLoc()))
       return true;
   }
 
-  InstantiateMacroLikeBody(M, DirectiveLoc, OS);
+  InstantiateMacroLikeBody(M, DirectiveLoc, Buf);
 
   return false;
 }
 
+/// ParseDirectiveEndr
+/// ::= .endr
 bool AsmParser::ParseDirectiveEndr(SMLoc DirectiveLoc) {
   if (ActiveMacros.empty())
     return TokError("unexpected '.endr' directive, no current .rept");
Index: llvm/test/MC/AsmParser/exprs.s
===================================================================
--- llvm.orig/test/MC/AsmParser/exprs.s	2012-07-20 12:45:59.090749513 -0400
+++ llvm/test/MC/AsmParser/exprs.s	2012-07-20 15:19:51.540269725 -0400
@@ -1,4 +1,4 @@
-// RUN: llvm-mc -triple i386-unknown-unknown %s > %t
+// RUN: llvm-mc -triple i386-apple-darwin10 %s > %t
 
 .macro check_expr
   .if ($0) != ($1)
Index: llvm/test/MC/AsmParser/macro-args.s
===================================================================
--- llvm.orig/test/MC/AsmParser/macro-args.s	2012-07-20 12:45:59.102749184 -0400
+++ llvm/test/MC/AsmParser/macro-args.s	2012-07-20 15:19:51.552269400 -0400
@@ -9,6 +9,15 @@
 
 // CHECK: movl	is_sse@GOTOFF(%ebx), %eax
 
+.macro PUT   var re_g=%eax
+    movl   \re_g,\var@GOTOFF(%ebx)
+.endm
+
+
+PUT    is_sse
+
+// CHECK: movl	%eax, is_sse@GOTOFF(%ebx)
+
 .macro bar
     .long $n
 .endm
Index: llvm/test/MC/AsmParser/macro-rept-err1.s
===================================================================
--- llvm.orig/test/MC/AsmParser/macro-rept-err1.s	2012-07-20 12:45:59.102749184 -0400
+++ llvm/test/MC/AsmParser/macro-rept-err1.s	2012-07-20 15:19:51.552269400 -0400
@@ -3,4 +3,4 @@
 
 .endr
 
-// CHECK: unexpected '.endr' directive, no current .rept
+// CHECK: unexpected '.endr' in file, no current macro definition
